/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import BLL.Department;
import BLL.Employee;
import BLL.EmployeeDepartmentHistory;
import BLL.EmployeeTrainings;
import BLL.TrainingTypes;
import DAL.DepartmentException;
import DAL.DepartmentInterface;
import DAL.DepartmentRepository;
import DAL.EmployeeDepHistoryException;
import DAL.EmployeeDepHistoryInterface;
import DAL.EmployeeDepHistoryRepository;
import DAL.EmployeeException;
import DAL.EmployeeInterface;
import DAL.EmployeeRepository;
import DAL.EmployeeTrainingsException;
import DAL.EmployeeTrainingsInterface;
import DAL.EmployeeTrainingsRepository;
import DAL.TrainingStatusInterface;
import DAL.TrainingStatusRepository;
import DAL.TrainingTypesException;
import DAL.TrainingTypesInterface;
import DAL.TrainingTypesRepository;
import MODEL.CertifiableTableModel;
import MODEL.DepartmentComboBoxModel;
import MODEL.EmployeeDepHistoryTableModel;
import MODEL.EmployeeStatusTableModel;
import MODEL.EmployeeTrainingsTableModel;
import MODEL.TrainingStatusTableModel;
import MODEL.TrainingTypesComboBoxModel;
import MODEL.TrainingsEmployeeTableModel;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author BesaC
 */
public class EmployeeTrainingInsertForm extends javax.swing.JInternalFrame {

    EmployeeTrainingsInterface etr = new EmployeeTrainingsRepository();
    EmployeeTrainingsTableModel ettm = new EmployeeTrainingsTableModel();

    EmployeeInterface er = new EmployeeRepository();
    TrainingsEmployeeTableModel etm = new TrainingsEmployeeTableModel();

    EmployeeDepHistoryInterface edhr = new EmployeeDepHistoryRepository();
    EmployeeDepHistoryTableModel edhtm = new EmployeeDepHistoryTableModel();

    EmployeeStatusTableModel estm = new EmployeeStatusTableModel();
    CertifiableTableModel ctm = new CertifiableTableModel();

    TrainingStatusTableModel tstm = new TrainingStatusTableModel();
    TrainingStatusInterface tsr = new TrainingStatusRepository();
    
    TrainingTypesComboBoxModel ttcbm = new TrainingTypesComboBoxModel();
    TrainingTypesInterface ttr = new TrainingTypesRepository();

    List<EmployeeDepartmentHistory> employeeDepartmentList = null;
    List<Employee> employeeList = null;

    public EmployeeTrainingInsertForm() {
        initComponents();
        tableLoad();
        generateList();
        trainingTypesCBLoad();

    }

    private void generateList() {
        try {
            Employee loggedIn = MainForm.getEmployee();
            Department d = etr.findEmployeeDepartment(loggedIn.getEmployeeID());
            List<Integer> list = etr.findValidEmployeesForTraining(d.getDepartmentID());

            for (int i = 0; i < list.size(); i++) {
                try {
                    employeeList = new ArrayList<Employee>();
                    employeeList.add(er.findById(list.get(i)));
                } catch (EmployeeException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }
            }
        } catch (EmployeeTrainingsException ex) {
            Logger.getLogger(EmployeeTrainingInsertForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        endDateChooserLbl = new javax.swing.JLabel();
        startDateLbl = new javax.swing.JLabel();
        trainingLbl = new javax.swing.JLabel();
        startDateChooser = new com.toedter.calendar.JDateChooser();
        endDateChooser = new com.toedter.calendar.JDateChooser();
        trainingCBM = new javax.swing.JComboBox();
        addBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();
        removeBtn = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(table);

        endDateChooserLbl.setText("EndDate");

        startDateLbl.setText("StartDate");

        trainingLbl.setText("Training");

        trainingCBM.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        addBtn.setText("Add All");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        cancelBtn.setText("Cancel");

        removeBtn.setText("Remove");
        removeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(63, 63, 63)
                                .addComponent(removeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(64, 64, 64)
                                .addComponent(cancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 180, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(7, 273, Short.MAX_VALUE)
                                        .addComponent(endDateChooserLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(trainingLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(startDateLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(45, 45, 45)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(startDateChooser, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(endDateChooser, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(trainingCBM, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(startDateChooser, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(startDateLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(trainingLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(29, 29, 29)
                .addComponent(trainingCBM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(endDateChooserLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(endDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addBtn)
                    .addComponent(cancelBtn)
                    .addComponent(removeBtn))
                .addGap(29, 29, 29)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(78, 78, 78))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(61, 61, 61))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void tableLoad() {

        etm = new TrainingsEmployeeTableModel(employeeList);
        table.setModel(etm);
        etm.fireTableDataChanged();

    }

    public void trainingTypesCBLoad() {
        try {
            List<TrainingTypes> list = ttr.findAll();
            ttcbm.add(list);
            trainingCBM.setModel(ttcbm);
            trainingCBM.repaint();
        } catch (TrainingTypesException ex) {
        }
    }

    private void clear() {
        table.clearSelection();

    }


    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        int row = table.getSelectedRow();
        
        if(row == -1){
            for (int i = 0; i < employeeList.size(); i++) {
                EmployeeTrainings et = new EmployeeTrainings();
                TrainingTypes tt = (TrainingTypes)trainingCBM.getSelectedItem() ;
                
                et.setTraining(tt);
                et.setEmployee(employeeList.get(i));
                    et.setEndDate(endDateChooser.getDate());
                    et.setStartDate(startDateChooser.getDate());
                    Date date = new Date();
                    if (date.compareTo(et.getStartDate()) < 0) {
                        et.setTrainingStatus(tstm.getTrainingStatus(3));        /// training status = 'PLANNED ' ---> ID=3
                    } else if (date.compareTo(et.getEndDate()) > 0) {
                        et.setTrainingStatus(tstm.getTrainingStatus(2));        /// training status = 'FINISHED' ---? ID=2
                    } else {
                        et.setTrainingStatus(tstm.getTrainingStatus(1));
                    }
                    
                    if (!tt.getCertifiable()) {
                        et.setCertified(ctm.getCertifiable(3));
                    } else {
                        et.setCertified(null);
                    }
                    try {
                        etr.create(et);
                        clear();
                        tableLoad();
                        JOptionPane.showMessageDialog(null, "Added Succesfully");
                    } catch (EmployeeTrainingsException ex) {
                     JOptionPane.showMessageDialog(this, ex.getMessage());
                    }
                
            }
        }
        
//        if (row != -1) {
//
//            try {
//                Employee e = etm.getEmployee(row);
//                Employee loggedIn = MainForm.getEmployee();
//                Department d = etr.findEmployeeDepartment(loggedIn.getEmployeeID());
//                List<Integer> list = etr.findValidEmployeesForTraining(d.getDepartmentID());
//                List<Employee> empList = null;
//
//                for (int i = 0; i < list.size(); i++) {
//                    try {
//                        empList.add(er.findById(i));
//                    } catch (EmployeeException ex) {
//                        JOptionPane.showMessageDialog(this, ex.getMessage());
//                    }
//                }
//
//                for (int i = 0; i < empList.size(); i++) {
//                    EmployeeTrainings et = new EmployeeTrainings();
//                    TrainingTypes tt = (TrainingTypes) trainingCBM.getSelectedItem();
//
//                    et.setTraining(tt);
//                    et.setEmployee(e);
//                }
//            } catch (EmployeeTrainingsException ex) {
//
//            }
//
//        }
////            for (int i = 0; i < employeeDepartmentList.size(); i++) {
////                try {
////                    employeeDepartmentList = edhr.findAll();
////                } catch (EmployeeDepHistoryException ex) {
////                }
////                if (employeeDepartmentList.get(i).getEndDate() != null) {
////                    EmployeeTrainings et = new EmployeeTrainings();
////                    TrainingTypes tt = (TrainingTypes) trainingCBM.getSelectedItem();
////                    et.setTraining(tt);
////                    et.setEmployee(e);
////                    et.setEndDate(endDateChooser.getDate());
////                    et.setStartDate(startDateChooser.getDate());
////                    Date date = new Date();
////                    if (date.compareTo(et.getStartDate()) < 0) {
////                        et.setTrainingStatus(tstm.getTrainingStatus(3));        /// training status = 'PLANNED ' ---> ID=3
////                    } else if (date.compareTo(et.getEndDate()) > 0) {
////                        et.setTrainingStatus(tstm.getTrainingStatus(2));        /// training status = 'FINISHED' ---? ID=2
////                    } else {
////                        et.setTrainingStatus(tstm.getTrainingStatus(1));
////                    }
////                    
////                    if (!tt.getCertifiable()) {
////                        et.setCertified(ctm.getCertifiable(3));
////                    } else {
////                        et.setCertified(null);
////                    }
////                    try {
////                        etr.create(et);
////                        clear();
////                        tableLoad();
////                        JOptionPane.showMessageDialog(null, "Added Succesfully");
////                    } catch (EmployeeTrainingsException ex) {
////                        JOptionPane.showMessageDialog(this, ex.getMessage());
////                    }
////                } else {
////
////                }
////
////            }
////        }
    }//GEN-LAST:event_addBtnActionPerformed

    private void removeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeBtnActionPerformed
        int row = table.getSelectedRow();

        if (row != -1) {
            Object[] obj = {"Yes", "No"};

            int i = JOptionPane.showOptionDialog(this, "Do you want to remove the selected Employee", "Removed succesfully",
                    JOptionPane.OK_OPTION, JOptionPane.QUESTION_MESSAGE, null, obj, obj[1]);
            if (i == 0) {
                
                Employee e = etm.getEmployee(row);
                employeeList.remove(e);
                clear();
                tableLoad();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select the item you want to delete");
        }
    }//GEN-LAST:event_removeBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JButton cancelBtn;
    private com.toedter.calendar.JDateChooser endDateChooser;
    private javax.swing.JLabel endDateChooserLbl;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton removeBtn;
    private com.toedter.calendar.JDateChooser startDateChooser;
    private javax.swing.JLabel startDateLbl;
    private javax.swing.JTable table;
    private javax.swing.JComboBox trainingCBM;
    private javax.swing.JLabel trainingLbl;
    // End of variables declaration//GEN-END:variables

}
